// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  (function(Backbone) {
    var argMap, proto;
    proto = Backbone.Model.prototype;
    argMap = {
      'undefined': void 0,
      'null': null,
      'true': true,
      'false': false
    };
    Backbone.ViewModel = (function(_super) {

      __extends(ViewModel, _super);

      function ViewModel(attributes, options) {
        this.onVirtual = __bind(this.onVirtual, this);

        this.createVirtual = __bind(this.createVirtual, this);

        this.virtual = __bind(this.virtual, this);

        this.pass = __bind(this.pass, this);

        this.compute = __bind(this.compute, this);

        this.parseBinding = __bind(this.parseBinding, this);

        this.bindToNode = __bind(this.bindToNode, this);

        var attr, fn, _ref;
        this._virtuals = {};
        this._bindings = [];
        ViewModel.__super__.constructor.apply(this, arguments);
        _ref = this.computes;
        for (attr in _ref) {
          fn = _ref[attr];
          this.compute(attr, fn);
        }
      }

      ViewModel.prototype.set = function(key, value, options) {
        var virtual, _ref;
        if (!(options && options.dependency)) {
          virtual = ((_ref = this._virtuals) != null ? _ref.hasOwnProperty(key) : void 0) && this._virtuals[key];
          if (virtual) {
            return virtual.set.call(this, key, value, options, virtual);
          }
        }
        return proto.set.apply(this, arguments);
      };

      ViewModel.prototype.bindView = function(attribute, container) {
        var node, nodes, selector, _i, _len;
        if (container == null) {
          container = 'body';
        }
        selector = '*[' + attribute + ']';
        nodes = $(container).find(selector);
        if ($(container).is(selector)) {
          nodes = $(container).add(nodes);
        }
        for (_i = 0, _len = nodes.length; _i < _len; _i++) {
          node = nodes[_i];
          this.bindToNode(attribute, node);
        }
        return nodes;
      };

      ViewModel.prototype.unbindView = function() {
        var binding, _i, _len, _ref;
        _ref = this._bindings;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          binding = _ref[_i];
          binding.stop();
        }
        return this._bindings = [];
      };

      ViewModel.prototype.isBoundTo = function(node) {
        var binding, _i, _len, _ref;
        _ref = this._bindings;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          binding = _ref[_i];
          if (binding.node === node) {
            return true;
          }
        }
        return false;
      };

      ViewModel.prototype.bindToNode = function(attribute, node) {
        var bindingList, bindingString, description, descriptions, pair, _i, _len, _results;
        if (this.isBoundTo(node)) {
          return;
        }
        bindingString = $(node).attr(attribute);
        bindingList = bindingString.split(';');
        descriptions = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = bindingList.length; _i < _len; _i++) {
            pair = bindingList[_i];
            _results.push(this.parseBinding(node, attribute, pair));
          }
          return _results;
        }).call(this);
        _results = [];
        for (_i = 0, _len = descriptions.length; _i < _len; _i++) {
          description = descriptions[_i];
          _results.push(this.createBinding(description));
        }
        return _results;
      };

      ViewModel.prototype.parseBinding = function(node, attribute, pair) {
        var arg, argString, args, type, typeSplit;
        typeSplit = pair.split('(');
        type = typeSplit[0].trim();
        argString = typeSplit[1].trim().slice(0, -1);
        args = (function() {
          var _i, _len, _ref, _results;
          _ref = argString.split(',');
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            arg = _ref[_i];
            _results.push(this.parseArgument(arg));
          }
          return _results;
        }).call(this);
        return {
          node: node,
          viewModel: this,
          type: type,
          bindingAttr: attribute,
          args: args
        };
      };

      ViewModel.prototype.parseArgument = function(arg) {
        arg = arg.trim();
        if (argMap.hasOwnProperty(arg)) {
          arg = argMap[arg];
        } else if (!isNaN(arg)) {
          arg = Number(arg);
        }
        return arg;
      };

      ViewModel.prototype.createBinding = function(description) {
        var Binding, binding;
        Binding = Backbone.Binding[description.type];
        if (Binding != null) {
          binding = new Binding(description);
          binding.start();
          this._bindings.push(binding);
          return binding;
        } else {
          throw new Error('Trying to create a binding of unknown type "' + description.type + '"');
        }
      };

      ViewModel.prototype.get = function(attr) {
        Backbone.Virtual.track(this, 'change:' + attr);
        return this.attributes[attr];
      };

      ViewModel.prototype.compute = function() {
        var args, get;
        args = _.toArray(arguments);
        get = args.pop();
        args.push({
          get: get
        });
        return this.virtual.apply(this, args);
      };

      ViewModel.prototype.pass = function() {
        var args, reference;
        args = _.toArray(arguments);
        reference = args.pop();
        args.push({
          reference: reference
        });
        return this.virtual.apply(this, args);
      };

      ViewModel.prototype.virtual = function() {
        var attr, attrs, options;
        attrs = _.toArray(arguments);
        options = attrs.pop();
        options.model = this;
        return (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = attrs.length; _i < _len; _i++) {
            attr = attrs[_i];
            _results.push(this.createVirtual(attr, options));
          }
          return _results;
        }).call(this);
      };

      ViewModel.prototype.createVirtual = function(attr, options) {
        var newVirtual, opts;
        opts = _.extend({}, options, {
          attr: attr
        });
        newVirtual = new Backbone.Virtual(opts);
        this._virtuals[attr] = newVirtual;
        newVirtual.on('change', this.onVirtual);
        return newVirtual.run();
      };

      ViewModel.prototype.onVirtual = function(virtual) {
        return this.set(virtual.attr, virtual.result, {
          dependency: true
        });
      };

      return ViewModel;

    })(Backbone.Model);
    return Backbone.Model = Backbone.ViewModel;
  })(Backbone);

}).call(this);
