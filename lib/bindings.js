// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  (function(Backbone) {
    var ClickBinding, CssBinding, EachBinding, TextBinding, ValueBinding, VisibleBinding;
    Backbone.Binding['visible'] = VisibleBinding = (function(_super) {

      __extends(VisibleBinding, _super);

      function VisibleBinding() {
        return VisibleBinding.__super__.constructor.apply(this, arguments);
      }

      VisibleBinding.prototype.initialize = function(attribute) {
        this.attribute = attribute;
      };

      VisibleBinding.prototype.onModelChange = function() {
        var val;
        val = this.viewModel.get(this.attribute);
        if (val) {
          return $(this.node).show();
        }
        return $(this.node).hide();
      };

      return VisibleBinding;

    })(Backbone.Binding);
    Backbone.Binding['text'] = TextBinding = (function(_super) {

      __extends(TextBinding, _super);

      function TextBinding() {
        return TextBinding.__super__.constructor.apply(this, arguments);
      }

      TextBinding.prototype.initialize = function(attribute) {
        this.attribute = attribute;
      };

      TextBinding.prototype.onModelChange = function() {
        var val;
        val = this.viewModel.get(this.attribute);
        return $(this.node).text(val);
      };

      return TextBinding;

    })(Backbone.Binding);
    Backbone.Binding['val'] = ValueBinding = (function(_super) {

      __extends(ValueBinding, _super);

      function ValueBinding() {
        return ValueBinding.__super__.constructor.apply(this, arguments);
      }

      ValueBinding.prototype.initialize = function(attribute) {
        this.attribute = attribute;
      };

      ValueBinding.prototype.start = function() {
        ValueBinding.__super__.start.apply(this, arguments);
        return $(this.node).on('keyup change', this.onViewChange);
      };

      ValueBinding.prototype.onModelChange = function() {
        var val;
        val = this.viewModel.get(this.attribute);
        return $(this.node).val(val);
      };

      ValueBinding.prototype.onViewChange = function() {
        var val;
        val = $(this.node).val();
        return this.viewModel.set(this.attribute, val);
      };

      ValueBinding.prototype.stop = function() {
        ValueBinding.__super__.stop.apply(this, arguments);
        return $(this.node).off('keyup change', this.onViewChange);
      };

      return ValueBinding;

    })(Backbone.Binding);
    Backbone.Binding['css'] = CssBinding = (function(_super) {

      __extends(CssBinding, _super);

      function CssBinding() {
        return CssBinding.__super__.constructor.apply(this, arguments);
      }

      CssBinding.prototype.initialize = function(className, attribute, truth) {
        this.className = className;
        this.attribute = attribute;
        this.truth = truth != null ? truth : true;
      };

      CssBinding.prototype.onModelChange = function() {
        var val;
        val = this.viewModel.get(this.attribute);
        if (Boolean(this.truth) === Boolean(val)) {
          return $(this.node).addClass(this.className);
        }
        return $(this.node).removeClass(this.className);
      };

      return CssBinding;

    })(Backbone.Binding);
    Backbone.Binding['click'] = ClickBinding = (function(_super) {

      __extends(ClickBinding, _super);

      function ClickBinding() {
        return ClickBinding.__super__.constructor.apply(this, arguments);
      }

      ClickBinding.prototype.initialize = function() {
        var args;
        args = _.toArray(arguments);
        this.callback = args.shift();
        return this.args = args;
      };

      ClickBinding.prototype.start = function() {
        return $(this.node).on('click', this.onViewChange);
      };

      ClickBinding.prototype.onViewChange = function(event) {
        var callback, _ref;
        event.preventDefault();
        callback = (_ref = this.viewModel[this.callback]) != null ? _ref : this.viewModel.get(this.callback);
        return callback.apply(this.viewModel, this.args);
      };

      ClickBinding.prototype.stop = function() {
        return $(this.node).off('click', this.onViewChange);
      };

      return ClickBinding;

    })(Backbone.Binding);
    return Backbone.Binding['each'] = EachBinding = (function(_super) {

      __extends(EachBinding, _super);

      function EachBinding() {
        this.renderItem = __bind(this.renderItem, this);
        return EachBinding.__super__.constructor.apply(this, arguments);
      }

      EachBinding.prototype.initialize = function(attr) {
        this.attr = attr;
        this.container = $(this.node);
        this.itemTemplate = this.container.html();
        return this.container.html('');
      };

      EachBinding.prototype.start = function() {
        this.viewModel.on('change:' + this.attr, this.onCollectionChange);
        return this.onCollectionChange();
      };

      EachBinding.prototype.onCollectionChange = function() {
        var item, self, _i, _len, _ref, _results;
        self = this;
        this.container.html('');
        this.collection = this.viewModel.get(this.attr);
        if (this.collection instanceof Backbone.Collection) {
          this.collection.off('add remove reset create sort', this.onCollectionChange);
          this.collection.each(this.renderItem);
          return this.collection.on('add remove reset create sort', this.onCollectionChange);
        } else {
          _ref = this.collection;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            item = _ref[_i];
            _results.push(this.renderItem(item));
          }
          return _results;
        }
      };

      EachBinding.prototype.renderItem = function(viewModel) {
        var node, _i, _len, _ref, _results;
        _ref = $(this.itemTemplate);
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          node = _ref[_i];
          this.container.append(node);
          _results.push(viewModel.bindView(this.bindingAttr, node));
        }
        return _results;
      };

      EachBinding.prototype.stop = function() {
        return this.viewModel.off('change:' + this.attr, this.onCollectionChange);
      };

      return EachBinding;

    })(Backbone.Binding);
  })(Backbone);

}).call(this);
