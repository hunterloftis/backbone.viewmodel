// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  (function(Backbone) {
    var backboneReads, extendCollection, fn, proto, underscoreReads, writes, _i, _len, _ref;
    proto = Backbone.Collection.prototype;
    writes = 'add remove reset change create sort';
    backboneReads = ['get', 'getByCid', 'where', 'pluck', 'clone', 'at', 'toJSON'];
    underscoreReads = ['forEach', 'each', 'map', 'reduce', 'reduceRight', 'find', 'detect', 'filter', 'select', 'reject', 'every', 'all', 'some', 'any', 'include', 'contains', 'invoke', 'max', 'min', 'sortBy', 'sortedIndex', 'toArray', 'size', 'first', 'initial', 'rest', 'last', 'without', 'indexOf', 'shuffle', 'lastIndexOf', 'isEmpty', 'groupBy'];
    Backbone.ViewCollection = (function(_super) {

      __extends(ViewCollection, _super);

      function ViewCollection() {
        return ViewCollection.__super__.constructor.apply(this, arguments);
      }

      ViewCollection.prototype.list = function() {
        Backbone.Virtual.track(this, writes);
        return this.models;
      };

      return ViewCollection;

    })(Backbone.Collection);
    Backbone.Collection.prototype.model = Backbone.Model;
    extendCollection = function(name) {
      return Backbone.ViewCollection.prototype[name] = function() {
        Backbone.Virtual.track(this, writes);
        return proto[name].apply(this, arguments);
      };
    };
    _ref = backboneReads.concat(underscoreReads);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      fn = _ref[_i];
      extendCollection(fn);
    }
    return Backbone.Collection = Backbone.ViewCollection;
  })(Backbone);

}).call(this);
