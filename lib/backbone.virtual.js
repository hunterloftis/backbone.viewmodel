// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  (function(Backbone) {
    Backbone.Virtual = (function() {

      Virtual._computations = [];

      Virtual._dependencies = void 0;

      Virtual.startTracking = function() {
        Backbone.Virtual._dependencies = [];
        return Backbone.Virtual._computations.push(Backbone.Virtual._dependencies);
      };

      Virtual.stopTracking = function() {
        var computations, dependencies;
        computations = Backbone.Virtual._computations;
        dependencies = computations.pop();
        if (computations.length) {
          Backbone.Virtual._dependencies = computations[computations.length - 1];
        } else {
          Backbone.Virtual._dependencies = void 0;
        }
        return dependencies;
      };

      Virtual.track = function(model, event) {
        var _ref;
        return (_ref = Backbone.Virtual._dependencies) != null ? _ref.push({
          model: model,
          event: event
        }) : void 0;
      };

      function Virtual(options) {
        this.remove = __bind(this.remove, this);

        this.add = __bind(this.add, this);

        this.update = __bind(this.update, this);

        this.onChange = __bind(this.onChange, this);

        this.run = __bind(this.run, this);

        this.runSafe = __bind(this.runSafe, this);
        _.extend(this, options);
        this.dependencies = [];
        this.result = void 0;
      }

      Virtual.prototype.runSafe = function() {
        try {
          return this.get.call(this.model, this.attr, this);
        } catch (error) {
          return this.fail;
        }
      };

      Virtual.prototype.run = function() {
        Backbone.Virtual.startTracking();
        if (this.hasOwnProperty('fail')) {
          this.result = this.runSafe();
        } else {
          this.result = this.get.call(this.model, this.attr, this);
        }
        this.update(Backbone.Virtual.stopTracking());
        this.trigger('change', this);
        return this.result;
      };

      Virtual.prototype.onChange = function() {
        return this.run();
      };

      Virtual.prototype.update = function(newDependencies) {
        var dep, _i, _j, _len, _len1, _ref;
        _ref = this.dependencies;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          dep = _ref[_i];
          this.remove(dep);
        }
        for (_j = 0, _len1 = newDependencies.length; _j < _len1; _j++) {
          dep = newDependencies[_j];
          this.add(dep);
        }
        return this.dependencies = newDependencies;
      };

      Virtual.prototype.add = function(dependency) {
        return dependency.model.on(dependency.event, this.onChange);
      };

      Virtual.prototype.remove = function(dependency) {
        return dependency.model.off(dependency.event, this.onChange);
      };

      Virtual.prototype.get = function(attr, virtual) {
        var model;
        if (typeof virtual.reference === 'function') {
          model = virtual.reference.call(this);
        } else {
          model = virtual.reference;
        }
        return model.get(attr);
      };

      Virtual.prototype.set = function(attr, val, options, virtual) {
        var model;
        if (typeof virtual.reference === 'function') {
          model = virtual.reference.call(this);
        } else {
          model = virtual.reference;
        }
        return model.set(attr, val);
      };

      return Virtual;

    })();
    return _.extend(Backbone.Virtual.prototype, Backbone.Events);
  })(Backbone);

}).call(this);
