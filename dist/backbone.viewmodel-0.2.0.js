// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  (function(Backbone) {
    var argMap, proto;
    proto = Backbone.Model.prototype;
    argMap = {
      'undefined': void 0,
      'null': null,
      'true': true,
      'false': false
    };
    Backbone.ViewModel = (function(_super) {

      __extends(ViewModel, _super);

      function ViewModel(attributes, options) {
        this.onVirtual = __bind(this.onVirtual, this);

        this.createVirtual = __bind(this.createVirtual, this);

        this.virtual = __bind(this.virtual, this);

        this.pass = __bind(this.pass, this);

        this.compute = __bind(this.compute, this);

        this.parseBinding = __bind(this.parseBinding, this);

        this.bindToNode = __bind(this.bindToNode, this);

        var attr, fn, _ref;
        this._virtuals = {};
        this._bindings = [];
        ViewModel.__super__.constructor.apply(this, arguments);
        _ref = this.computes;
        for (attr in _ref) {
          fn = _ref[attr];
          this.compute(attr, fn);
        }
      }

      ViewModel.prototype.set = function(key, value, options) {
        var virtual, _ref;
        if (!(options && options.dependency)) {
          virtual = ((_ref = this._virtuals) != null ? _ref.hasOwnProperty(key) : void 0) && this._virtuals[key];
          if (virtual) {
            return virtual.set.call(this, key, value, options, virtual);
          }
        }
        return proto.set.apply(this, arguments);
      };

      ViewModel.prototype.bindView = function(attribute, container) {
        var node, nodes, selector, _i, _len;
        if (container == null) {
          container = 'body';
        }
        selector = '*[' + attribute + ']';
        nodes = $(container).find(selector);
        if ($(container).is(selector)) {
          nodes = $(container).add(nodes);
        }
        for (_i = 0, _len = nodes.length; _i < _len; _i++) {
          node = nodes[_i];
          this.bindToNode(attribute, node);
        }
        return nodes;
      };

      ViewModel.prototype.unbindView = function() {
        var binding, _i, _len, _ref;
        _ref = this._bindings;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          binding = _ref[_i];
          binding.stop();
        }
        return this._bindings = [];
      };

      ViewModel.prototype.isBoundTo = function(node) {
        var binding, _i, _len, _ref;
        _ref = this._bindings;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          binding = _ref[_i];
          if (binding.node === node) {
            return true;
          }
        }
        return false;
      };

      ViewModel.prototype.bindToNode = function(attribute, node) {
        var bindingList, bindingString, description, descriptions, pair, _i, _len, _results;
        if (this.isBoundTo(node)) {
          return;
        }
        bindingString = $(node).attr(attribute);
        bindingList = bindingString.split(';');
        descriptions = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = bindingList.length; _i < _len; _i++) {
            pair = bindingList[_i];
            _results.push(this.parseBinding(node, attribute, pair));
          }
          return _results;
        }).call(this);
        _results = [];
        for (_i = 0, _len = descriptions.length; _i < _len; _i++) {
          description = descriptions[_i];
          _results.push(this.createBinding(description));
        }
        return _results;
      };

      ViewModel.prototype.parseBinding = function(node, attribute, pair) {
        var arg, argString, args, type, typeSplit;
        typeSplit = pair.split('(');
        type = typeSplit[0].trim();
        argString = typeSplit[1].trim().slice(0, -1);
        args = (function() {
          var _i, _len, _ref, _results;
          _ref = argString.split(',');
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            arg = _ref[_i];
            _results.push(this.parseArgument(arg));
          }
          return _results;
        }).call(this);
        return {
          node: node,
          viewModel: this,
          type: type,
          bindingAttr: attribute,
          args: args
        };
      };

      ViewModel.prototype.parseArgument = function(arg) {
        arg = arg.trim();
        if (argMap.hasOwnProperty(arg)) {
          arg = argMap[arg];
        } else if (!isNaN(arg)) {
          arg = Number(arg);
        }
        return arg;
      };

      ViewModel.prototype.createBinding = function(description) {
        var Binding, binding;
        Binding = Backbone.Binding[description.type];
        if (Binding != null) {
          binding = new Binding(description);
          binding.start();
          this._bindings.push(binding);
          return binding;
        } else {
          throw new Error('Trying to create a binding of unknown type "' + description.type + '"');
        }
      };

      ViewModel.prototype.get = function(attr) {
        Backbone.Virtual.track(this, 'change:' + attr);
        return this.attributes[attr];
      };

      ViewModel.prototype.compute = function() {
        var args, get;
        args = _.toArray(arguments);
        get = args.pop();
        args.push({
          get: get
        });
        return this.virtual.apply(this, args);
      };

      ViewModel.prototype.pass = function() {
        var args, reference;
        args = _.toArray(arguments);
        reference = args.pop();
        args.push({
          reference: reference
        });
        return this.virtual.apply(this, args);
      };

      ViewModel.prototype.virtual = function() {
        var attr, attrs, options;
        attrs = _.toArray(arguments);
        options = attrs.pop();
        options.model = this;
        return (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = attrs.length; _i < _len; _i++) {
            attr = attrs[_i];
            _results.push(this.createVirtual(attr, options));
          }
          return _results;
        }).call(this);
      };

      ViewModel.prototype.createVirtual = function(attr, options) {
        var newVirtual, opts;
        opts = _.extend({}, options, {
          attr: attr
        });
        newVirtual = new Backbone.Virtual(opts);
        this._virtuals[attr] = newVirtual;
        newVirtual.on('change', this.onVirtual);
        return newVirtual.run();
      };

      ViewModel.prototype.onVirtual = function(virtual) {
        return this.set(virtual.attr, virtual.result, {
          dependency: true
        });
      };

      return ViewModel;

    })(Backbone.Model);
    return Backbone.Model = Backbone.ViewModel;
  })(Backbone);

}).call(this);
// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  (function(Backbone) {
    var backboneReads, extendCollection, fn, proto, underscoreReads, writes, _i, _len, _ref;
    proto = Backbone.Collection.prototype;
    writes = 'add remove reset change create sort';
    backboneReads = ['get', 'getByCid', 'where', 'pluck', 'clone', 'at', 'toJSON'];
    underscoreReads = ['forEach', 'each', 'map', 'reduce', 'reduceRight', 'find', 'detect', 'filter', 'select', 'reject', 'every', 'all', 'some', 'any', 'include', 'contains', 'invoke', 'max', 'min', 'sortBy', 'sortedIndex', 'toArray', 'size', 'first', 'initial', 'rest', 'last', 'without', 'indexOf', 'shuffle', 'lastIndexOf', 'isEmpty', 'groupBy'];
    Backbone.ViewCollection = (function(_super) {

      __extends(ViewCollection, _super);

      function ViewCollection() {
        return ViewCollection.__super__.constructor.apply(this, arguments);
      }

      ViewCollection.prototype.list = function() {
        Backbone.Virtual.track(this, writes);
        return this.models;
      };

      return ViewCollection;

    })(Backbone.Collection);
    Backbone.Collection.prototype.model = Backbone.Model;
    extendCollection = function(name) {
      return Backbone.ViewCollection.prototype[name] = function() {
        Backbone.Virtual.track(this, writes);
        return proto[name].apply(this, arguments);
      };
    };
    _ref = backboneReads.concat(underscoreReads);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      fn = _ref[_i];
      extendCollection(fn);
    }
    return Backbone.Collection = Backbone.ViewCollection;
  })(Backbone);

}).call(this);
// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  (function(Backbone) {
    Backbone.Virtual = (function() {

      Virtual._computations = [];

      Virtual._dependencies = void 0;

      Virtual.startTracking = function() {
        Backbone.Virtual._dependencies = [];
        return Backbone.Virtual._computations.push(Backbone.Virtual._dependencies);
      };

      Virtual.stopTracking = function() {
        var computations, dependencies;
        computations = Backbone.Virtual._computations;
        dependencies = computations.pop();
        if (computations.length) {
          Backbone.Virtual._dependencies = computations[computations.length - 1];
        } else {
          Backbone.Virtual._dependencies = void 0;
        }
        return dependencies;
      };

      Virtual.track = function(model, event) {
        var _ref;
        return (_ref = Backbone.Virtual._dependencies) != null ? _ref.push({
          model: model,
          event: event
        }) : void 0;
      };

      function Virtual(options) {
        this.remove = __bind(this.remove, this);

        this.add = __bind(this.add, this);

        this.update = __bind(this.update, this);

        this.onChange = __bind(this.onChange, this);

        this.run = __bind(this.run, this);

        this.runSafe = __bind(this.runSafe, this);
        _.extend(this, options);
        this.dependencies = [];
        this.result = void 0;
      }

      Virtual.prototype.runSafe = function() {
        try {
          return this.get.call(this.model, this.attr, this);
        } catch (error) {
          return this.fail;
        }
      };

      Virtual.prototype.run = function() {
        Backbone.Virtual.startTracking();
        if (this.hasOwnProperty('fail')) {
          this.result = this.runSafe();
        } else {
          this.result = this.get.call(this.model, this.attr, this);
        }
        this.update(Backbone.Virtual.stopTracking());
        this.trigger('change', this);
        return this.result;
      };

      Virtual.prototype.onChange = function() {
        return this.run();
      };

      Virtual.prototype.update = function(newDependencies) {
        var dep, _i, _j, _len, _len1, _ref;
        _ref = this.dependencies;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          dep = _ref[_i];
          this.remove(dep);
        }
        for (_j = 0, _len1 = newDependencies.length; _j < _len1; _j++) {
          dep = newDependencies[_j];
          this.add(dep);
        }
        return this.dependencies = newDependencies;
      };

      Virtual.prototype.add = function(dependency) {
        return dependency.model.on(dependency.event, this.onChange);
      };

      Virtual.prototype.remove = function(dependency) {
        return dependency.model.off(dependency.event, this.onChange);
      };

      Virtual.prototype.get = function(attr, virtual) {
        var model;
        if (typeof virtual.reference === 'function') {
          model = virtual.reference.call(this);
        } else {
          model = virtual.reference;
        }
        return model.get(attr);
      };

      Virtual.prototype.set = function(attr, val, options, virtual) {
        var model;
        if (typeof virtual.reference === 'function') {
          model = virtual.reference.call(this);
        } else {
          model = virtual.reference;
        }
        return model.set(attr, val);
      };

      return Virtual;

    })();
    return _.extend(Backbone.Virtual.prototype, Backbone.Events);
  })(Backbone);

}).call(this);
// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  (function(Backbone) {
    Backbone.Binding = (function() {

      function Binding(description) {
        this.stop = __bind(this.stop, this);

        this.start = __bind(this.start, this);

        this.onViewChange = __bind(this.onViewChange, this);

        this.onCollectionChange = __bind(this.onCollectionChange, this);

        this.onModelChange = __bind(this.onModelChange, this);

        this.initialize = __bind(this.initialize, this);
        _.extend(this, description);
        this.initialize.apply(this, description.args);
      }

      Binding.prototype.initialize = function() {};

      Binding.prototype.onModelChange = function() {};

      Binding.prototype.onCollectionChange = function() {};

      Binding.prototype.onViewChange = function() {};

      Binding.prototype.start = function() {
        this.viewModel.on('change:' + this.attribute, this.onModelChange);
        return this.onModelChange();
      };

      Binding.prototype.stop = function() {
        return this.viewModel.off('change:' + this.attribute, this.onModelChange);
      };

      return Binding;

    })();
    return Backbone.Binding.extend = Backbone.Model.extend;
  })(Backbone);

}).call(this);
// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  (function(Backbone) {
    var ClickBinding, CssBinding, EachBinding, TextBinding, ValueBinding, VisibleBinding;
    Backbone.Binding['visible'] = VisibleBinding = (function(_super) {

      __extends(VisibleBinding, _super);

      function VisibleBinding() {
        return VisibleBinding.__super__.constructor.apply(this, arguments);
      }

      VisibleBinding.prototype.initialize = function(attribute) {
        this.attribute = attribute;
      };

      VisibleBinding.prototype.onModelChange = function() {
        var val;
        val = this.viewModel.get(this.attribute);
        if (val) {
          return $(this.node).show();
        }
        return $(this.node).hide();
      };

      return VisibleBinding;

    })(Backbone.Binding);
    Backbone.Binding['text'] = TextBinding = (function(_super) {

      __extends(TextBinding, _super);

      function TextBinding() {
        return TextBinding.__super__.constructor.apply(this, arguments);
      }

      TextBinding.prototype.initialize = function(attribute) {
        this.attribute = attribute;
      };

      TextBinding.prototype.onModelChange = function() {
        var val;
        val = this.viewModel.get(this.attribute);
        return $(this.node).text(val);
      };

      return TextBinding;

    })(Backbone.Binding);
    Backbone.Binding['val'] = ValueBinding = (function(_super) {

      __extends(ValueBinding, _super);

      function ValueBinding() {
        return ValueBinding.__super__.constructor.apply(this, arguments);
      }

      ValueBinding.prototype.initialize = function(attribute) {
        this.attribute = attribute;
      };

      ValueBinding.prototype.start = function() {
        ValueBinding.__super__.start.apply(this, arguments);
        return $(this.node).on('keyup change', this.onViewChange);
      };

      ValueBinding.prototype.onModelChange = function() {
        var val;
        val = this.viewModel.get(this.attribute);
        return $(this.node).val(val);
      };

      ValueBinding.prototype.onViewChange = function() {
        var val;
        val = $(this.node).val();
        return this.viewModel.set(this.attribute, val);
      };

      ValueBinding.prototype.stop = function() {
        ValueBinding.__super__.stop.apply(this, arguments);
        return $(this.node).off('keyup change', this.onViewChange);
      };

      return ValueBinding;

    })(Backbone.Binding);
    Backbone.Binding['css'] = CssBinding = (function(_super) {

      __extends(CssBinding, _super);

      function CssBinding() {
        return CssBinding.__super__.constructor.apply(this, arguments);
      }

      CssBinding.prototype.initialize = function(className, attribute, truth) {
        this.className = className;
        this.attribute = attribute;
        this.truth = truth != null ? truth : true;
      };

      CssBinding.prototype.onModelChange = function() {
        var val;
        val = this.viewModel.get(this.attribute);
        if (Boolean(this.truth) === Boolean(val)) {
          return $(this.node).addClass(this.className);
        }
        return $(this.node).removeClass(this.className);
      };

      return CssBinding;

    })(Backbone.Binding);
    Backbone.Binding['click'] = ClickBinding = (function(_super) {

      __extends(ClickBinding, _super);

      function ClickBinding() {
        return ClickBinding.__super__.constructor.apply(this, arguments);
      }

      ClickBinding.prototype.initialize = function() {
        var args;
        args = _.toArray(arguments);
        this.callback = args.shift();
        return this.args = args;
      };

      ClickBinding.prototype.start = function() {
        return $(this.node).on('click', this.onViewChange);
      };

      ClickBinding.prototype.onViewChange = function(event) {
        var callback, _ref;
        event.preventDefault();
        callback = (_ref = this.viewModel[this.callback]) != null ? _ref : this.viewModel.get(this.callback);
        return callback.apply(this.viewModel, this.args);
      };

      ClickBinding.prototype.stop = function() {
        return $(this.node).off('click', this.onViewChange);
      };

      return ClickBinding;

    })(Backbone.Binding);
    return Backbone.Binding['each'] = EachBinding = (function(_super) {

      __extends(EachBinding, _super);

      function EachBinding() {
        this.renderItem = __bind(this.renderItem, this);
        return EachBinding.__super__.constructor.apply(this, arguments);
      }

      EachBinding.prototype.initialize = function(attr) {
        this.attr = attr;
        this.container = $(this.node);
        this.itemTemplate = this.container.html();
        return this.container.html('');
      };

      EachBinding.prototype.start = function() {
        this.viewModel.on('change:' + this.attr, this.onCollectionChange);
        return this.onCollectionChange();
      };

      EachBinding.prototype.onCollectionChange = function() {
        var item, self, _i, _len, _ref, _results;
        self = this;
        this.container.html('');
        this.collection = this.viewModel.get(this.attr);
        if (this.collection instanceof Backbone.Collection) {
          this.collection.off('add remove reset create sort', this.onCollectionChange);
          this.collection.each(this.renderItem);
          return this.collection.on('add remove reset create sort', this.onCollectionChange);
        } else {
          _ref = this.collection;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            item = _ref[_i];
            _results.push(this.renderItem(item));
          }
          return _results;
        }
      };

      EachBinding.prototype.renderItem = function(viewModel) {
        var node, _i, _len, _ref, _results;
        _ref = $(this.itemTemplate);
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          node = _ref[_i];
          this.container.append(node);
          _results.push(viewModel.bindView(this.bindingAttr, node));
        }
        return _results;
      };

      EachBinding.prototype.stop = function() {
        return this.viewModel.off('change:' + this.attr, this.onCollectionChange);
      };

      return EachBinding;

    })(Backbone.Binding);
  })(Backbone);

}).call(this);
